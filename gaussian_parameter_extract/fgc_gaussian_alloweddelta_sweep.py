import pylab as plb
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import asarray as ar,exp
import numpy as np
from lmfit.models import GaussianModel, ConstantModel
from lxml import objectify as obj
import os
#from Measurements.Analyses.ProcessFunctions.auxiliary import xml_to_array

# Define model function to be used to fit to the data above:
def readxml(inputxml):
    t = str.split(inputxml.text, ',')
    output_temp = []
    for number in t:
        output_temp.append(float(number))
    #print x_raw_temp
    output = np.array(output_temp)
    return output

def gauss(x, *p):
    A, mu, sigma, delta, voff = p
    return A*np.exp(-(x-mu)**2/(2.*sigma**2)) + A*np.exp(-(x-mu-delta)**2/(2.*sigma**2)) + voff


"""
if 1:
    #measurement with identical input and output angles
    x_raw = ar([1510.0196,1510.5286,1511.0371,1511.5321,1512.027,1512.5201,1513.0312,1513.5396,1514.0368,1514.532,1515.022,1515.5281,1516.0274,1516.5262,1517.0342,1517.5373,1518.0407,1518.5281,1519.0195,1519.5197,1520.0236,1520.533,1521.0327,1521.5327,1522.027,1522.5302,1523.0331,1523.5286,1524.026,1524.525,1525.0365,1525.5386,1526.0357,1526.5262,1527.0205,1527.5269,1528.0286,1528.5326,1529.0266,1529.5258,1530.0285,1530.5241,1531.0251,1531.5236,1532.0305,1532.53,1533.0229,1533.5193,1534.0153,1534.5288,1535.0378,1535.5398,1536.0343,1536.5285,1537.0295,1537.5238,1538.025,1538.5265,1539.0302,1539.5319,1540.0229,1540.5266,1541.0277,1541.5415,1542.0403,1542.5373,1543.0352,1543.5318,1544.0371,1544.5311,1545.025,1545.5206,1546.0226,1546.5373,1547.036,1547.5347,1548.0228,1548.5285,1549.0361,1549.5406,1550.0367,1550.5266,1551.0278,1551.5242,1552.0235,1552.5248,1553.0309,1553.5367,1554.0302,1554.5252,1555.0184,1555.5256,1556.0338,1556.5319,1557.0285,1557.5215,1558.0259,1558.5238,1559.0248,1559.5263,1560.0263,1560.5278,1561.0159,1561.5143,1562.0129,1562.5227,1563.033,1563.5298,1564.0293,1564.5246,1565.0293,1565.5249,1566.021,1566.5189,1567.0226,1567.5312,1568.0266,1568.5198,1569.0109,1569.516,1570.0208,1570.5247,1571.0198,1571.5155,1572.0191,1572.5113,1573.0122,1573.5119,1574.0171,1574.518,1575.0079,1575.502,1575.9997,1576.5133,1577.0231,1577.5261,1578.0189,1578.5154,1579.0167,1579.5089,1580.0128,1580.5128,1581.019,1581.5173,1582.0128,1582.5134,1583.016,1583.525,1584.0239,1584.5258,1585.0206,1585.5225,1586.0233,1586.5167,1587.0126,1587.512,1588.022,1588.5218,1589.0208,1589.5139,1590.0132,1590.5211,1591.0245,1591.5238,1592.0169,1592.5196,1593.0134,1593.5105,1594.0117,1594.516,1595.02,1595.5134,1596.0118,1596.5088,1597.0187,1597.5266,1598.0268,1598.5211,1599.0156,1599.5189,1600.0141,1600.516,1601.016,1601.5209,1602.0221,1602.5146,1603.013,1603.5128,1604.0218,1604.5199,1605.0212,1605.5182,1606.0195,1606.5179,1607.011,1607.5073,1608.0082,1608.5203,1609.02,1609.5193,1610.0091,1610.5108,1611.016,1611.5184,1612.0179,1612.5108,1613.0132,1613.5051,1614.0025,1614.5061,1615.0185,1615.52,1616.0133,1616.5046,1617.0056,1617.5163,1618.0181,1618.5154,1619.0068,1619.5046,1620.006,1620.5054,1621.0095,1621.51,1622.0169,1622.5082,1623.0046,1623.5019,1624.0058,1624.5101])
    y_raw = ar([-24.057806015014648,-23.946317672729492,-23.75282096862793,-23.572376251220703,-23.338973999023438,-23.104557037353516,-22.884113311767578,-22.660003662109375,-22.561113357543945,-22.42042350769043,-22.285659790039063,-22.041534423828125,-21.804609298706055,-21.576534271240234,-21.448863983154297,-21.303560256958008,-21.177587509155273,-21.07081413269043,-20.93876838684082,-20.678308486938477,-20.490524291992188,-20.314090728759766,-20.117168426513672,-19.933603286743164,-19.78577995300293,-19.617361068725586,-19.522777557373047,-19.380525588989258,-19.17997932434082,-18.969966888427734,-18.774482727050781,-18.593025207519531,-18.497833251953125,-18.424327850341797,-18.341123580932617,-18.256126403808594,-18.098474502563477,-17.91325569152832,-17.75543212890625,-17.625564575195313,-17.450904846191406,-17.379621505737305,-17.262676239013672,-17.174537658691406,-17.081319808959961,-16.993141174316406,-16.813339233398438,-16.639139175415039,-16.52757453918457,-16.427286148071289,-16.411140441894531,-16.343973159790039,-16.327381134033203,-16.193157196044922,-16.091516494750977,-15.970961570739746,-15.889710426330566,-15.806929588317871,-15.733906745910645,-15.713761329650879,-15.664427757263184,-15.645350456237793,-15.575150489807129,-15.489316940307617,-15.373679161071777,-15.314512252807617,-15.279855728149414,-15.27567195892334,-15.325763702392578,-15.290909767150879,-15.331643104553223,-15.217769622802734,-15.21617317199707,-15.055276870727539,-15.002053260803223,-14.988292694091797,-14.971526145935059,-15.022444725036621,-15.009856224060059,-14.970912933349609,-15.050315856933594,-15.00454044342041,-14.940582275390625,-14.897773742675781,-14.94524097442627,-15.062819480895996,-15.122420310974121,-15.186071395874023,-15.179648399353027,-15.151126861572266,-15.094350814819336,-15.09482479095459,-15.13578987121582,-15.061670303344727,-15.09760856628418,-15.166591644287109,-15.211099624633789,-15.247358322143555,-15.230311393737793,-15.21096134185791,-15.199553489685059,-15.231618881225586,-15.281603813171387,-15.357376098632812,-15.416465759277344,-15.514884948730469,-15.55073356628418,-15.549376487731934,-15.605953216552734,-15.54885196685791,-15.603811264038086,-15.64256763458252,-15.74420166015625,-15.84660530090332,-15.961145401000977,-16.008829116821289,-16.053226470947266,-16.094263076782227,-16.173669815063477,-16.314006805419922,-16.416843414306641,-16.594568252563477,-16.705842971801758,-16.935440063476563,-16.959012985229492,-17.083650588989258,-17.174375534057617,-17.23579216003418,-17.289348602294922,-17.373769760131836,-17.566858291625977,-17.653806686401367,-17.847549438476563,-18.044986724853516,-18.039113998413086,-18.150121688842773,-18.172998428344727,-18.306770324707031,-18.490766525268555,-18.622045516967773,-18.852432250976562,-19.035579681396484,-19.096090316772461,-19.195623397827148,-19.280160903930664,-19.410318374633789,-19.454639434814453,-19.673061370849609,-19.803281784057617,-19.943870544433594,-20.134210586547852,-20.326148986816406,-20.428129196166992,-20.594423294067383,-20.693338394165039,-20.866804122924805,-21.182113647460937,-21.348161697387695,-21.702699661254883,-21.815053939819336,-22.067659378051758,-22.248447418212891,-22.394283294677734,-22.541261672973633,-22.749588012695313,-22.941549301147461,-23.14140510559082,-23.379243850708008,-23.809202194213867,-24.039707183837891,-24.312978744506836,-24.470958709716797,-24.670009613037109,-24.921714782714844,-25.240007400512695,-25.527385711669922,-25.820425033569336,-26.135011672973633,-26.46879768371582,-26.840909957885742,-27.13935661315918,-27.475748062133789,-27.76995849609375,-28.075624465942383,-28.510492324829102,-28.674064636230469,-29.096487045288086,-29.399435043334961,-29.658405303955078,-30.089235305786133,-30.515754699707031,-30.824121475219727,-31.337907791137695,-31.744451522827148,-32.213680267333984,-32.625560760498047,-33.042488098144531,-33.586662292480469,-33.854522705078125,-34.246883392333984,-34.77447509765625,-35.156402587890625,-35.478717803955078,-36.017684936523438,-36.419525146484375,-36.996128082275391,-37.475513458251953,-37.944705963134766,-38.317722320556641,-38.800022125244141,-39.332756042480469,-39.814510345458984,-40.517528533935547,-40.920856475830078,-41.486358642578125,-42.005428314208984,-42.632450103759766,-43.288738250732422,-43.729610443115234,-44.304676055908203,-45.030567169189453,-45.251136779785156,-45.788860321044922,-46.133846282958984,-46.817672729492188,-46.992988586425781,-47.512283325195313,-48.023807525634766,-48.3260498046875,-48.82171630859375])
elif 1:
    #measurement with input angle 10deg and output angle 11.5deg
    x_raw = ar([1510.0208,1510.5302,1511.0379,1511.5329,1512.0293,1512.524,1513.0326,1513.5416,1514.0405,1514.5385,1515.0274,1515.5311,1516.0301,1516.5321,1517.0392,1517.5425,1518.0455,1518.5339,1519.0249,1519.5235,1520.0292,1520.5385,1521.0368,1521.5361,1522.0305,1522.5345,1523.0373,1523.5331,1524.0314,1524.5256,1525.0374,1525.5394,1526.0359,1526.5273,1527.021,1527.5269,1528.0279,1528.5325,1529.0262,1529.5262,1530.0273,1530.5227,1531.0226,1531.5218,1532.0292,1532.5286,1533.0219,1533.5175,1534.014,1534.5254,1535.0347,1535.5374,1536.0319,1536.5248,1537.0255,1537.52,1538.0214,1538.5226,1539.026,1539.5281,1540.0184,1540.5213,1541.0233,1541.5368,1542.0364,1542.5339,1543.0308,1543.528,1544.0327,1544.5274,1545.0207,1545.5185,1546.0209,1546.5341,1547.0336,1547.533,1548.0213,1548.5277,1549.0354,1549.5391,1550.036,1550.5273,1551.027,1551.524,1552.0233,1552.5257,1553.0298,1553.5369,1554.0302,1554.5254,1555.0188,1555.5262,1556.0341,1556.5317,1557.0287,1557.5207,1558.026,1558.5236,1559.0247,1559.5248,1560.0252,1560.5276,1561.0152,1561.5129,1562.0121,1562.5244,1563.0332,1563.5326,1564.031,1564.5262,1565.0306,1565.5261,1566.0222,1566.5219,1567.0259,1567.5354,1568.0298,1568.5234,1569.0148,1569.5195,1570.0244,1570.5275,1571.0232,1571.5193,1572.0238,1572.5155,1573.0175,1573.5173,1574.0232,1574.5238,1575.0126,1575.5042,1576.0031,1576.5163,1577.0247,1577.5269,1578.0201,1578.5168,1579.0171,1579.5098,1580.0132,1580.5133,1581.0184,1581.5169,1582.0127,1582.5129,1583.0151,1583.5246,1584.0235,1584.5237,1585.0186,1585.5218,1586.0212,1586.5156,1587.0109,1587.5096,1588.0191,1588.5189,1589.0175,1589.5099,1590.0082,1590.5169,1591.0197,1591.5197,1592.0129,1592.514,1593.0104,1593.506,1594.0077,1594.5128,1595.017,1595.5115,1596.0092,1596.5061,1597.016,1597.525,1598.0255,1598.5189,1599.0138,1599.5174,1600.0131,1600.5155,1601.0159,1601.5216,1602.0216,1602.5146,1603.0134,1603.5131,1604.0209,1604.5205,1605.0217,1605.5173,1606.0194,1606.5182,1607.0101,1607.5068,1608.0071,1608.5196,1609.0207,1609.5186,1610.01,1610.5105,1611.0156,1611.5186,1612.0167,1612.511,1613.0119,1613.5056,1614.0048,1614.5078,1615.0193,1615.5221,1616.0146,1616.5092,1617.0077,1617.52,1618.0223,1618.5187,1619.01,1619.5092,1620.0099,1620.5102,1621.0137,1621.5155,1622.0203,1622.5123,1623.009,1623.5069,1624.0118,1624.5164])
    y_raw = ar([-22.405715942382813,-22.248315811157227,-22.053016662597656,-21.800394058227539,-21.625955581665039,-21.410137176513672,-21.209453582763672,-20.936101913452148,-20.881925582885742,-20.680871963500977,-20.525588989257813,-20.263761520385742,-20.056575775146484,-19.866567611694336,-19.754470825195313,-19.619932174682617,-19.496364593505859,-19.386425018310547,-19.25318717956543,-18.968193054199219,-18.841497421264648,-18.690126419067383,-18.454069137573242,-18.275173187255859,-18.132621765136719,-18.026660919189453,-17.988349914550781,-17.826700210571289,-17.660249710083008,-17.508039474487305,-17.332271575927734,-17.221162796020508,-17.123218536376953,-17.08531379699707,-17.038518905639648,-16.963617324829102,-16.834123611450195,-16.717344284057617,-16.625751495361328,-16.515647888183594,-16.399818420410156,-16.287708282470703,-16.184484481811523,-16.15776252746582,-16.123067855834961,-16.018890380859375,-15.936452865600586,-15.788228988647461,-15.709367752075195,-15.659036636352539,-15.61638355255127,-15.61334228515625,-15.586030960083008,-15.531342506408691,-15.451549530029297,-15.417159080505371,-15.24191951751709,-15.169781684875488,-15.184613227844238,-15.157497406005859,-15.164961814880371,-15.250646591186523,-15.128497123718262,-15.020374298095703,-15.079591751098633,-14.991185188293457,-14.963403701782227,-15.01830005645752,-15.052685737609863,-15.084575653076172,-15.094922065734863,-15.080177307128906,-15.026492118835449,-14.971720695495605,-14.964550018310547,-14.986340522766113,-14.982373237609863,-15.077774047851563,-15.073947906494141,-15.09234619140625,-15.11749267578125,-15.08100700378418,-15.063412666320801,-15.081647872924805,-15.128927230834961,-15.234662055969238,-15.265422821044922,-15.347700119018555,-15.361766815185547,-15.366703987121582,-15.357009887695313,-15.378541946411133,-15.525381088256836,-15.457094192504883,-15.563252449035645,-15.65577220916748,-15.783328056335449,-15.832945823669434,-15.889346122741699,-15.877164840698242,-15.925895690917969,-16.015996932983398,-16.176149368286133,-16.233245849609375,-16.461910247802734,-16.542856216430664,-16.621719360351563,-16.68443489074707,-16.848934173583984,-16.78297233581543,-16.967599868774414,-17.034126281738281,-17.18528938293457,-17.339649200439453,-17.494880676269531,-17.514904022216797,-17.683450698852539,-17.769374847412109,-17.87809944152832,-18.006393432617188,-18.167434692382812,-18.322093963623047,-18.454132080078125,-18.702945709228516,-18.761865615844727,-18.833566665649414,-18.906293869018555,-18.982217788696289,-19.080194473266602,-19.186098098754883,-19.363935470581055,-19.518199920654297,-19.728116989135742,-19.885322570800781,-19.92970085144043,-20.048055648803711,-20.146266937255859,-20.296085357666016,-20.503509521484375,-20.684196472167969,-20.931386947631836,-21.161184310913086,-21.309001922607422,-21.456888198852539,-21.611963272094727,-21.791908264160156,-21.856271743774414,-22.155235290527344,-22.37523078918457,-22.619739532470703,-22.884521484375,-23.176746368408203,-23.338380813598633,-23.583847045898437,-23.71923828125,-23.892156600952148,-24.369964599609375,-24.605646133422852,-25.066806793212891,-25.194911956787109,-25.545019149780273,-25.797483444213867,-25.999967575073242,-26.190303802490234,-26.430271148681641,-26.619964599609375,-26.882125854492187,-27.217052459716797,-27.704311370849609,-27.920148849487305,-28.258665084838867,-28.521686553955078,-28.7606201171875,-29.08856201171875,-29.400976181030273,-29.663408279418945,-29.999591827392578,-30.38304328918457,-30.794050216674805,-31.205314636230469,-31.518743515014648,-31.935630798339844,-32.240119934082031,-32.602252960205078,-33.155605316162109,-33.419681549072266,-33.858154296875,-34.290054321289063,-34.628257751464844,-35.188209533691406,-35.649612426757813,-36.018581390380859,-36.589309692382813,-37.117095947265625,-37.661735534667969,-38.135257720947266,-38.679214477539063,-39.227104187011719,-39.703361511230469,-40.16754150390625,-40.834823608398437,-41.401523590087891,-41.804782867431641,-42.357372283935547,-42.813976287841797,-43.479587554931641,-44.015865325927734,-44.322238922119141,-44.914768218994141,-45.400306701660156,-45.790786743164063,-46.401004791259766,-46.947471618652344,-47.1209716796875,-47.53582763671875,-48.106380462646484,-48.036003112792969,-48.327869415283203,-48.735214233398438,-49.117683410644531,-49.206069946289063,-48.807308197021484,-49.387779235839844,-49.0780029296875,-49.061389923095703,-49.297451019287109,-49.710914611816406,-50.081546783447266,-50.152961730957031,-50.225715637207031])
elif 0:
"""






def gaussianfitting(x_raw, y_raw, wlbandw):
					#limit wavelength window
    peak = np.max(y_raw)
    idx = np.argwhere(y_raw > peak - 3.0)
    x_raw_fit = x_raw[idx][:,0]
    y_raw_fit = y_raw[idx][:,0]
    # p0 is the initial guess for the fitting coefficients (A, mu and sigma above)
    p0 = np.array([20.0, 1550.0, 60.0, 20.0, 100.0])
    #bnd = np.array([5.0, 10.0, 20.0, 20.0, 1000.0])
    bnd = np.array([5.0, 10+wlbandw, 20.0, 20.0, 1000.0])
    coeff, var_matrix = curve_fit(gauss, x_raw_fit, y_raw_fit, p0=p0, method='trf', bounds=(p0-bnd, p0+bnd))
	# Get the fitted curve
    hist_fit = gauss(x_raw_fit, *coeff)
    '''
    plt.plot(x_raw, y_raw, label='Test data')
    plt.plot(x_raw_fit, hist_fit, label='Fitted data')
    plt.show()
    
	# Finally, lets get the fitting parameters, i.e. the mean and standard deviation:
    
    print 'Fitted mean1 = ', coeff[1]
    print 'Fitted standard deviation = ', coeff[2]
    print 'Fitted mean2 = ', coeff[1] + coeff[3]
    print 'Peak wavelength delta = ', coeff[3]
    '''
    return coeff[3]
	
if __name__ == "__main__":
    #read data from xml file
    filename = r'//winbe/oiodata/01_data/PA300/dong87/P162388/D06_17362/pitch_sweep/P162388_D06_17362_(0,0)_SIPP24_11.0(15.0d)_1550_L-L_R-R_P-P.xml'
    with open(filename, 'r') as f:
        ObjectData = obj.fromstring(f.read())
        dataxml = ObjectData.OpticalMeasurements.LossMeasurement.WaveguideLossMeasurement.PortLossMeasurement.MeasurementResult
        #x_raw = xml_to_array(dataxml.PortLossMeasurement.MeasurementResult[0].L)
        x_raw = dataxml.L
       # y_raw = xml_to_array(dataxml.PortLossMeasurement.MeasurementResult[0].IL) 
        y_raw = dataxml.IL
    x_raw = readxml(x_raw)
    y_raw = readxml(y_raw)
    #print y_raw_temp
    #print(x_raw)
    wlbandw = 400
    DELTA = np.zeros(wlbandw)
    for i in range(wlbandw):
        DELTA[i] = gaussianfitting(x_raw, y_raw, i)	
    print(DELTA)
    x_axis = np.zeros(wlbandw)
    for i in range(wlbandw):
        x_axis[i] = 10 + i
    plt.plot(DELTA, label = 'trends of delta with the variance of allowed bandwidth' )
    plt.show()
